[{"class_name": "Intersection", "superclass": "", "interfaces": "", "c_sig": "class Intersection", "has_constructor": false, "fields": [], "methods": [{"method_name": "intersection", "m_sig": "public static String intersection(List<Integer> interval1, List<Integer> interval2)", "class": "Intersection", "source_code": "public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        if (start > end) {\n            return \"NO\";\n        }\n        if (isPrime(end - start)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }", "parameters": "intersection(List<Integer>, List<Integer>)", "modifiers": "public static", "return": "String", "signature": "String intersection(List<Integer> interval1, List<Integer> interval2)", "class_method_signature": "Intersection.intersection(List<Integer> interval1, List<Integer> interval2)", "is_constructor": false, "use_field": false, "is_get_set": false, "m_deps": {"List<Integer>": ["get()"], "this": ["isPrime()"]}}, {"method_name": "isPrime", "m_sig": "private static boolean isPrime(int n)", "class": "Intersection", "source_code": "private static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }", "parameters": "isPrime(int)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPrime(int n)", "class_method_signature": "Intersection.isPrime(int n)", "is_constructor": false, "use_field": false, "is_get_set": false, "m_deps": {}}], "argument_list": "", "imports": ["import java.util.List;"], "class_path": "../original/target/classes/original/id_127.java", "package": "package original;", "project_name": "original"}]