[{"class_name": "Monotonic", "superclass": "", "interfaces": "", "c_sig": "class Monotonic", "has_constructor": false, "fields": [], "methods": [{"method_name": "monotonic", "m_sig": "public static Boolean monotonic(List<Integer> l)", "class": "Monotonic", "source_code": "public static Boolean monotonic(List<Integer> l) {\n        int size = l.size();\n        if (size == 1) {\n            return true;\n        }\n        int direction = l.get(1) - l.get(0);\n        for (int i = 1; i < size - 1; i++) {\n            if (direction == 0) {\n                direction = l.get(i + 1) - l.get(i);\n            } else if (direction > 0) {\n                if (l.get(i + 1) < l.get(i)) {\n                    return false;\n                }\n            } else {\n                if (l.get(i + 1) > l.get(i)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }", "parameters": "monotonic(List<Integer>)", "modifiers": "public static", "return": "Boolean", "signature": "Boolean monotonic(List<Integer> l)", "class_method_signature": "Monotonic.monotonic(List<Integer> l)", "is_constructor": false, "use_field": false, "is_get_set": false, "m_deps": {"List<Integer>": ["size()", "get()"]}}], "argument_list": "", "imports": ["import java.util.List;"], "class_path": "../original/target/classes/original/id_57.java", "package": "package original;", "project_name": "original"}]