[{"class_name": "CountUpTo", "superclass": "", "interfaces": "", "c_sig": "class CountUpTo", "has_constructor": false, "fields": [], "methods": [{"method_name": "countUpTo", "m_sig": "public static List<Object> countUpTo(int n)", "class": "CountUpTo", "source_code": "public static List<Object> countUpTo(int n) {\n        List<Object> result = new ArrayList<Object>();\n        int i = 2;\n        while (i < n) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;\n    }", "parameters": "countUpTo(int)", "modifiers": "public static", "return": "List<Object>", "signature": "List<Object> countUpTo(int n)", "class_method_signature": "CountUpTo.countUpTo(int n)", "is_constructor": false, "use_field": false, "is_get_set": false, "m_deps": {"this": ["isPrime()"]}}, {"method_name": "isPrime", "m_sig": "private static boolean isPrime(int n)", "class": "CountUpTo", "source_code": "private static boolean isPrime(int n) {\n        int i = 2;\n        while (i < n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }", "parameters": "isPrime(int)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPrime(int n)", "class_method_signature": "CountUpTo.isPrime(int n)", "is_constructor": false, "use_field": false, "is_get_set": false, "m_deps": {}}], "argument_list": "", "imports": ["import java.util.ArrayList;", "import java.util.List;"], "class_path": "../original/target/classes/original/id_96.java", "package": "package original;", "project_name": "original"}]