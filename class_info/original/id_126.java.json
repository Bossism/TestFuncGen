[{"class_name": "IsSorted", "superclass": "", "interfaces": "", "c_sig": "class IsSorted", "has_constructor": false, "fields": [], "methods": [{"method_name": "isSorted", "m_sig": "public static Boolean isSorted(List<Object> lst)", "class": "IsSorted", "source_code": "public static Boolean isSorted(List<Object> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < lst.size() - 1; i++) {\n            int curr = (int) lst.get(i);\n            map.put(curr, map.getOrDefault(curr, 0) + 1);\n            if (map.get(curr) > 2) {\n                return false;\n            }\n        }\n\n        int prev = (int) lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            int curr = (int) lst.get(i);\n            if (curr < prev) {\n                return false;\n            }\n            prev = curr;\n        }\n        return true;\n    }", "parameters": "isSorted(List<Object>)", "modifiers": "public static", "return": "Boolean", "signature": "Boolean isSorted(List<Object> lst)", "class_method_signature": "IsSorted.isSorted(List<Object> lst)", "is_constructor": false, "use_field": false, "is_get_set": false, "m_deps": {"List<Object>": ["size()", "get()"]}}], "argument_list": "", "imports": ["import java.util.HashMap;", "import java.util.List;"], "class_path": "../original/target/classes/original/id_126.java", "package": "package original;", "project_name": "original"}]