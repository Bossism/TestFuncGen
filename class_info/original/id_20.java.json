[{"class_name": "FindClosestElements", "superclass": "", "interfaces": "", "c_sig": "class FindClosestElements", "has_constructor": false, "fields": [], "methods": [{"method_name": "findClosestElements", "m_sig": "public static List<Double> findClosestElements(List<Double> numbers)", "class": "FindClosestElements", "source_code": "public static List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        double minDiff = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < minDiff) {\n                    minDiff = diff;\n                    result.clear();\n                    result.add(numbers.get(i));\n                    result.add(numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }", "parameters": "findClosestElements(List<Double>)", "modifiers": "public static", "return": "List<Double>", "signature": "List<Double> findClosestElements(List<Double> numbers)", "class_method_signature": "FindClosestElements.findClosestElements(List<Double> numbers)", "is_constructor": false, "use_field": true, "is_get_set": false, "m_deps": {"List<Double>": ["size()", "get()"]}}], "argument_list": "", "imports": ["import java.util.ArrayList;", "import java.util.Collections;", "import java.util.List;"], "class_path": "../original/target/classes/original/id_20.java", "package": "package original;", "project_name": "original"}]