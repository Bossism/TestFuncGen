[{"class_name": "Maximum1", "superclass": "", "interfaces": "", "c_sig": "class Maximum1", "has_constructor": false, "fields": [], "methods": [{"method_name": "maximum", "m_sig": "public static List<Object> maximum(List<Integer> arr, int k)", "class": "Maximum1", "source_code": "public static List<Object> maximum(List<Integer> arr, int k) {\n        int n = arr.size();\n        if (n == 0 || k == 0) {\n            return new ArrayList<Object>();\n        }\n        if (n <= k) {\n\n            Collections.sort(arr);\n            return new ArrayList<Object>(arr);\n        }\n        List<Object> res = new ArrayList<Object>();\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>(k);\n        for (int i = 0; i < n; i++) {\n            if (i < k) {\n                heap.add(arr.get(i));\n            } else {\n                if (arr.get(i) > heap.peek()) {\n                    heap.poll();\n                    heap.add(arr.get(i));\n                }\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            res.add(heap.poll());\n        }\n        Collections.sort(res, new Comparator<Object>() {\n            public int compare(Object o1, Object o2) {\n                return (int) o1 - (int) o2;\n            }\n        });\n        return res;\n    }", "parameters": "maximum(List<Integer>, int)", "modifiers": "public static", "return": "List<Object>", "signature": "List<Object> maximum(List<Integer> arr, int k)", "class_method_signature": "Maximum1.maximum(List<Integer> arr, int k)", "is_constructor": false, "use_field": false, "is_get_set": false, "m_deps": {"List<Integer>": ["size()", "get()"]}}], "argument_list": "", "imports": ["import java.util.*;"], "class_path": "../original/target/classes/original/id_120.java", "package": "package original;", "project_name": "original"}]