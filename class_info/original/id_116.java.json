[{"class_name": "SortArray", "superclass": "", "interfaces": "", "c_sig": "class SortArray", "has_constructor": false, "fields": [], "methods": [{"method_name": "sortArray", "m_sig": "public static List<Object> sortArray(List<Object> arr)", "class": "SortArray", "source_code": "public static List<Object> sortArray(List<Object> arr) {\n        List<Object> sorted = new ArrayList<Object>();\n        for (int i = 0; i < arr.size(); i++) {\n            int num = ((Number) arr.get(i)).intValue();\n            int ones = 0;\n            while (num > 0) {\n                ones += num % 2;\n                num /= 2;\n            }\n            sorted.add(new int[]{ones, ((Number) arr.get(i)).intValue()});\n        }\n        Collections.sort(sorted, new Comparator<Object>() {\n            public int compare(Object o1, Object o2) {\n                int[] a1 = (int[]) o1;\n                int[] a2 = (int[]) o2;\n                if (a1[0] == a2[0]) {\n                    return a1[1] - a2[1];\n                }\n                return a1[0] - a2[0];\n            }\n        });\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < sorted.size(); i++) {\n            result.add(((int[]) sorted.get(i))[1]);\n        }\n        return result;\n    }", "parameters": "sortArray(List<Object>)", "modifiers": "public static", "return": "List<Object>", "signature": "List<Object> sortArray(List<Object> arr)", "class_method_signature": "SortArray.sortArray(List<Object> arr)", "is_constructor": false, "use_field": false, "is_get_set": false, "m_deps": {"List<Object>": ["size()", "get()"]}}], "argument_list": "", "imports": ["import java.util.ArrayList;", "import java.util.Collections;", "import java.util.Comparator;", "import java.util.List;"], "class_path": "../original/target/classes/original/id_116.java", "package": "package original;", "project_name": "original"}]