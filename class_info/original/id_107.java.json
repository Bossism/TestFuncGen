[{"class_name": "EvenOddPalindrome", "superclass": "", "interfaces": "", "c_sig": "class EvenOddPalindrome", "has_constructor": false, "fields": [], "methods": [{"method_name": "evenOddPalindrome", "m_sig": "public static List<Integer> evenOddPalindrome(int n)", "class": "EvenOddPalindrome", "source_code": "public static List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }", "parameters": "evenOddPalindrome(int)", "modifiers": "public static", "return": "List<Integer>", "signature": "List<Integer> evenOddPalindrome(int n)", "class_method_signature": "EvenOddPalindrome.evenOddPalindrome(int n)", "is_constructor": false, "use_field": false, "is_get_set": false, "m_deps": {"this": ["isPalindrome()"]}}, {"method_name": "isPalindrome", "m_sig": "private static boolean isPalindrome(int n)", "class": "EvenOddPalindrome", "source_code": "private static boolean isPalindrome(int n) {\n        int m = n;\n        int reversed = 0;\n        while (m > 0) {\n            reversed = reversed * 10 + m % 10;\n            m /= 10;\n        }\n        return n == reversed;\n    }", "parameters": "isPalindrome(int)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPalindrome(int n)", "class_method_signature": "EvenOddPalindrome.isPalindrome(int n)", "is_constructor": false, "use_field": false, "is_get_set": false, "m_deps": {}}], "argument_list": "", "imports": ["import java.util.ArrayList;", "import java.util.List;"], "class_path": "../original/target/classes/original/id_107.java", "package": "package original;", "project_name": "original"}]