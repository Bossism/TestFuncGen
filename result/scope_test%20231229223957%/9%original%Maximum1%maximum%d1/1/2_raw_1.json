{"has_code": true, "source_code": "package original;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.*;\n\npublic class Maximum1Test {\n\n    @Test\n    public void testMaximum() {\n        // Test case 1\n        List<Integer> arr1 = Arrays.asList(-3, -4, 5);\n        int k1 = 3;\n        List<Object> expected1 = Arrays.asList(-4, -3, 5);\n        List<Object> result1 = Maximum1.maximum(arr1, k1);\n        assertEquals(expected1, result1);\n\n        // Test case 2\n        List<Integer> arr2 = Arrays.asList(4, -4, 4);\n        int k2 = 2;\n        List<Object> expected2 = Arrays.asList(4, 4);\n        List<Object> result2 = Maximum1.maximum(arr2, k2);\n        assertEquals(expected2, result2);\n\n        // Test case 3\n        List<Integer> arr3 = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);\n        int k3 = 1;\n        List<Object> expected3 = Arrays.asList(2);\n        List<Object> result3 = Maximum1.maximum(arr3, k3);\n        assertEquals(expected3, result3);\n\n        // Test case 4\n        List<Integer> arr4 = Arrays.asList(123, -123, 20, 0, 1, 2, -3);\n        int k4 = 3;\n        List<Object> expected4 = Arrays.asList(2, 20, 123);\n        List<Object> result4 = Maximum1.maximum(arr4, k4);\n        assertEquals(expected4, result4);\n\n        // Test case 5\n        List<Integer> arr5 = Arrays.asList(-123, 20, 0, 1, 2, -3);\n        int k5 = 4;\n        List<Object> expected5 = Arrays.asList(0, 1, 2, 20);\n        List<Object> result5 = Maximum1.maximum(arr5, k5);\n        assertEquals(expected5, result5);\n\n        // Test case 6\n        List<Integer> arr6 = Arrays.asList(5, 15, 0, 3, -13, -8, 0);\n        int k6 = 7;\n        List<Object> expected6 = Arrays.asList(-13, -8, 0, 0, 3, 5, 15);\n        List<Object> result6 = Maximum1.maximum(arr6, k6);\n        assertEquals(expected6, result6);\n\n        // Test case 7\n        List<Integer> arr7 = Arrays.asList(-1, 0, 2, 5, 3, -10);\n        int k7 = 2;\n        List<Object> expected7 = Arrays.asList(3, 5);\n        List<Object> result7 = Maximum1.maximum(arr7, k7);\n        assertEquals(expected7, result7);\n\n        // Test case 8\n        List<Integer> arr8 = Arrays.asList(1, 0, 5, -7);\n        int k8 = 1;\n        List<Object> expected8 = Arrays.asList(5);\n        List<Object> result8 = Maximum1.maximum(arr8, k8);\n        assertEquals(expected8, result8);\n\n        // Test case 9\n        List<Integer> arr9 = Arrays.asList(4, -4);\n        int k9 = 2;\n        List<Object> expected9 = Arrays.asList(-4, 4);\n        List<Object> result9 = Maximum1.maximum(arr9, k9);\n        assertEquals(expected9, result9);\n\n        // Test case 10\n        List<Integer> arr10 = Arrays.asList(-10, 10);\n        int k10 = 2;\n        List<Object> expected10 = Arrays.asList(-10, 10);\n        List<Object> result10 = Maximum1.maximum(arr10, k10);\n        assertEquals(expected10, result10);\n\n        // Test case 11\n        List<Integer> arr11 = Arrays.asList(1, 2, 3, -23, 243, -400, 0);\n        int k11 = 0;\n        List<Object> expected11 = new ArrayList<>();\n        List<Object> result11 = Maximum1.maximum(arr11, k11);\n        assertEquals(expected11, result11);\n    }\n}", "has_syntactic_error": false, "coverage_xml": true}