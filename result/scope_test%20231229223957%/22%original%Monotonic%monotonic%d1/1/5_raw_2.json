{"has_code": true, "source_code": "package original;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class MonotonicTest {\n\n    @Test\n    public void testMonotonicIncreasing() {\n        List<Integer> list = Arrays.asList(1, 2, 4, 10);\n        assertTrue(Monotonic.monotonic(list));\n    }\n\n    @Test\n    public void testMonotonicDecreasing() {\n        List<Integer> list = Arrays.asList(10, 4, 2, 1);\n        assertTrue(Monotonic.monotonic(list));\n    }\n\n    @Test\n    public void testMonotonicMixed() {\n        List<Integer> list = Arrays.asList(1, 20, 4, 10);\n        assertFalse(Monotonic.monotonic(list));\n    }\n\n    @Test\n    public void testMonotonicEqual() {\n        List<Integer> list = Arrays.asList(4, 4, 4, 4);\n        assertTrue(Monotonic.monotonic(list));\n    }\n\n    @Test\n    public void testMonotonicNonMonotonic() {\n        List<Integer> list = Arrays.asList(1, 2, 3, 2, 5, 60);\n        assertFalse(Monotonic.monotonic(list));\n    }\n\n    @Test\n    public void testMonotonicEmptyList() {\n        List<Integer> list = Arrays.asList();\n        assertTrue(Monotonic.monotonic(list));\n    }\n\n    @Test\n    public void testMonotonicSingleElement() {\n        List<Integer> list = Arrays.asList(5);\n        assertTrue(Monotonic.monotonic(list));\n    }\n}", "has_syntactic_error": false, "runtime_error": "\nFailures (1):\n  JUnit Vintage:Monotonic_22_1Test:testMonotonicEmptyList\n    MethodSource [className = 'original.Monotonic_22_1Test', methodName = 'testMonotonicEmptyList', methodParameterTypes = '']\n    => java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 0\n       java.base/java.util.Arrays$ArrayList.get(Arrays.java:4351)\n       original.Monotonic.monotonic(id_57.java:32)\n       original.Monotonic_22_1Test.testMonotonicEmptyList(Monotonic_22_1Test.java:44)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n       org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\n       [...]\n\nTest run finished after 45 ms\n[         4 containers found      ]\n[         0 containers skipped    ]\n[         4 containers started    ]\n[         0 containers aborted    ]\n[         4 containers successful ]\n[         0 containers failed     ]\n[         7 tests found           ]\n[         0 tests skipped         ]\n[         7 tests started         ]\n[         0 tests aborted         ]\n[         6 tests successful      ]\n[         1 tests failed          ]\n\n"}