{"has_code": true, "source_code": "package original;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FilterBySubstringTest {\n\n    @Test\n    public void testFilterBySubstring_emptyList() {\n        List<Object> strings = new ArrayList<>();\n        String substring = \"a\";\n        List<Object> result = FilterBySubstring.filterBySubstring(strings, substring);\n        assertEquals(0, result.size());\n    }\n\n    @Test\n    public void testFilterBySubstring_matchingStrings() {\n        List<Object> strings = new ArrayList<>();\n        strings.add(\"abc\");\n        strings.add(\"bacd\");\n        strings.add(\"cde\");\n        strings.add(\"array\");\n        String substring = \"a\";\n        List<Object> result = FilterBySubstring.filterBySubstring(strings, substring);\n        assertEquals(3, result.size());\n        assertTrue(result.contains(\"abc\"));\n        assertTrue(result.contains(\"bacd\"));\n        assertTrue(result.contains(\"array\"));\n    }\n\n    @Test\n    public void testFilterBySubstring_noMatchingStrings() {\n        List<Object> strings = new ArrayList<>();\n        strings.add(\"xyz\");\n        strings.add(\"pqr\");\n        strings.add(\"lmn\");\n        String substring = \"a\";\n        List<Object> result = FilterBySubstring.filterBySubstring(strings, substring);\n        assertEquals(0, result.size());\n    }\n\n    @Test\n    public void testFilterBySubstring_multipleMatches() {\n        List<Object> strings = new ArrayList<>();\n        strings.add(\"xxx\");\n        strings.add(\"asd\");\n        strings.add(\"xxy\");\n        strings.add(\"john doe\");\n        strings.add(\"xxxAAA\");\n        strings.add(\"xxx\");\n        String substring = \"xxx\";\n        List<Object> result = FilterBySubstring.filterBySubstring(strings, substring);\n        assertEquals(3, result.size());\n        assertTrue(result.contains(\"xxx\"));\n        assertTrue(result.contains(\"xxxAAA\"));\n        assertTrue(result.contains(\"xxx\"));\n    }\n\n    @Test\n    public void testFilterBySubstring_partialMatches() {\n        List<Object> strings = new ArrayList<>();\n        strings.add(\"xxx\");\n        strings.add(\"asd\");\n        strings.add(\"aaaxxy\");\n        strings.add(\"john doe\");\n        strings.add(\"xxxAAA\");\n        strings.add(\"xxx\");\n        String substring = \"xx\";\n        List<Object> result = FilterBySubstring.filterBySubstring(strings, substring);\n        assertEquals(4, result.size());\n        assertTrue(result.contains(\"xxx\"));\n        assertTrue(result.contains(\"aaaxxy\"));\n        assertTrue(result.contains(\"xxxAAA\"));\n        assertTrue(result.contains(\"xxx\"));\n    }\n\n    @Test\n    public void testFilterBySubstring_caseSensitive() {\n        List<Object> strings = new ArrayList<>();\n        strings.add(\"grunt\");\n        strings.add(\"trumpet\");\n        strings.add(\"prune\");\n        strings.add(\"gruesome\");\n        String substring = \"run\";\n        List<Object> result = FilterBySubstring.filterBySubstring(strings, substring);\n        assertEquals(2, result.size());\n        assertTrue(result.contains(\"grunt\"));\n        assertTrue(result.contains(\"prune\"));\n    }\n}", "has_syntactic_error": false, "coverage_xml": true}