{"has_code": true, "source_code": "package original;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class RescaleToUnitTest {\n\n    @Test\n    public void testRescaleToUnit() {\n        List<Double> numbers = new ArrayList<>();\n        numbers.add(1.0);\n        numbers.add(2.0);\n        numbers.add(3.0);\n        numbers.add(4.0);\n        numbers.add(5.0);\n\n        List<Double> expected = new ArrayList<>();\n        expected.add(0.0);\n        expected.add(0.25);\n        expected.add(0.5);\n        expected.add(0.75);\n        expected.add(1.0);\n\n        List<Double> result = RescaleToUnit.rescaleToUnit(numbers);\n\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testRescaleToUnitWithTwoElements() {\n        List<Double> numbers = new ArrayList<>();\n        numbers.add(2.0);\n        numbers.add(49.9);\n\n        List<Double> expected = new ArrayList<>();\n        expected.add(0.0);\n        expected.add(1.0);\n\n        List<Double> result = RescaleToUnit.rescaleToUnit(numbers);\n\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testRescaleToUnitWithReverseOrder() {\n        List<Double> numbers = new ArrayList<>();\n        numbers.add(100.0);\n        numbers.add(49.9);\n\n        List<Double> expected = new ArrayList<>();\n        expected.add(1.0);\n        expected.add(0.0);\n\n        List<Double> result = RescaleToUnit.rescaleToUnit(numbers);\n\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testRescaleToUnitWithDuplicateElements() {\n        List<Double> numbers = new ArrayList<>();\n        numbers.add(1.0);\n        numbers.add(2.0);\n        numbers.add(3.0);\n        numbers.add(4.0);\n        numbers.add(5.0);\n\n        List<Double> expected = new ArrayList<>();\n        expected.add(0.0);\n        expected.add(0.25);\n        expected.add(0.5);\n        expected.add(0.75);\n        expected.add(1.0);\n\n        List<Double> result = RescaleToUnit.rescaleToUnit(numbers);\n\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testRescaleToUnitWithUnorderedElements() {\n        List<Double> numbers = new ArrayList<>();\n        numbers.add(2.0);\n        numbers.add(1.0);\n        numbers.add(5.0);\n        numbers.add(3.0);\n        numbers.add(4.0);\n\n        List<Double> expected = new ArrayList<>();\n        expected.add(0.25);\n        expected.add(0.0);\n        expected.add(1.0);\n        expected.add(0.5);\n        expected.add(0.75);\n\n        List<Double> result = RescaleToUnit.rescaleToUnit(numbers);\n\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testRescaleToUnitWithUnorderedElementsAndDuplicateValues() {\n        List<Double> numbers = new ArrayList<>();\n        numbers.add(12.0);\n        numbers.add(11.0);\n        numbers.add(15.0);\n        numbers.add(13.0);\n        numbers.add(14.0);\n\n        List<Double> expected = new ArrayList<>();\n        expected.add(0.25);\n        expected.add(0.0);\n        expected.add(1.0);\n        expected.add(0.5);\n        expected.add(0.75);\n\n        List<Double> result = RescaleToUnit.rescaleToUnit(numbers);\n\n        assertEquals(expected, result);\n    }\n}", "has_syntactic_error": false, "coverage_xml": true}