{"has_code": true, "source_code": "package original;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class IntersperseTest {\n\n    @Test\n    public void testIntersperseWithEmptyList() {\n        List<Object> numbers = new ArrayList<>();\n        int delimiter = 4;\n        List<Object> expected = new ArrayList<>();\n        List<Object> result = Intersperse.intersperse(numbers, delimiter);\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testIntersperseWithNonEmptyList() {\n        List<Object> numbers = Arrays.asList(1, 2, 3);\n        int delimiter = 4;\n        List<Object> expected = Arrays.asList(1, 4, 2, 4, 3);\n        List<Object> result = Intersperse.intersperse(numbers, delimiter);\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testIntersperseWithEmptyListAndDifferentDelimiter() {\n        List<Object> numbers = new ArrayList<>();\n        int delimiter = 7;\n        List<Object> expected = new ArrayList<>();\n        List<Object> result = Intersperse.intersperse(numbers, delimiter);\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testIntersperseWithNonEmptyListAndDifferentDelimiter() {\n        List<Object> numbers = Arrays.asList(5, 6, 3, 2);\n        int delimiter = 8;\n        List<Object> expected = Arrays.asList(5, 8, 6, 8, 3, 8, 2);\n        List<Object> result = Intersperse.intersperse(numbers, delimiter);\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testIntersperseWithSameNumberAndDelimiter() {\n        List<Object> numbers = Arrays.asList(2, 2, 2);\n        int delimiter = 2;\n        List<Object> expected = Arrays.asList(2, 2, 2, 2, 2);\n        List<Object> result = Intersperse.intersperse(numbers, delimiter);\n        assertEquals(expected, result);\n    }\n}", "has_syntactic_error": false, "coverage_xml": true}