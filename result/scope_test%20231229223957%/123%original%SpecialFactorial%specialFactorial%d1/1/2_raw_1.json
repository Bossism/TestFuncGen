{"has_code": true, "source_code": "package original;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SpecialFactorialTest {\n\n    @Test\n    public void testSpecialFactorial() {\n        assertEquals(288, SpecialFactorial.specialFactorial(4));\n        assertEquals(34560, SpecialFactorial.specialFactorial(5));\n        assertEquals(125411328000L, SpecialFactorial.specialFactorial(7));\n        assertEquals(1, SpecialFactorial.specialFactorial(1));\n    }\n\n    @Test\n    public void testSpecialFactorialWithZero() {\n        assertEquals(1, SpecialFactorial.specialFactorial(0));\n    }\n\n    @Test\n    public void testSpecialFactorialWithNegativeNumber() {\n        try {\n            SpecialFactorial.specialFactorial(-1);\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"Input must be greater than 0\", e.getMessage());\n        }\n    }\n\n    @Test\n    public void testSpecialFactorialWithLargeNumber() {\n        assertEquals(0, SpecialFactorial.specialFactorial(20));\n    }\n}", "has_syntactic_error": false, "runtime_error": "\nFailures (1):\n  JUnit Vintage:SpecialFactorial_123_1Test:testSpecialFactorialWithNegativeNumber\n    MethodSource [className = 'original.SpecialFactorial_123_1Test', methodName = 'testSpecialFactorialWithNegativeNumber', methodParameterTypes = '']\n    => java.lang.AssertionError: Expected IllegalArgumentException\n       org.junit.Assert.fail(Assert.java:89)\n       original.SpecialFactorial_123_1Test.testSpecialFactorialWithNegativeNumber(SpecialFactorial_123_1Test.java:24)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n       org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\n       org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n       [...]\n\nTest run finished after 43 ms\n[         4 containers found      ]\n[         0 containers skipped    ]\n[         4 containers started    ]\n[         0 containers aborted    ]\n[         4 containers successful ]\n[         0 containers failed     ]\n[         4 tests found           ]\n[         0 tests skipped         ]\n[         4 tests started         ]\n[         0 tests aborted         ]\n[         3 tests successful      ]\n[         1 tests failed          ]\n\n"}