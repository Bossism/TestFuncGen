{"has_code": true, "source_code": "package original;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class Solve1Test {\n\n    @Test\n    public void testSolve() {\n        // Test case 1\n        int n1 = 12345;\n        String expected1 = \"101\";\n        String result1 = Solve1.solve(n1);\n        assertEquals(expected1, result1);\n\n        // Test case 2\n        int n2 = 987654321;\n        String expected2 = \"110\";\n        String result2 = Solve1.solve(n2);\n        assertEquals(expected2, result2);\n\n        // Test case 3\n        int n3 = 0;\n        String expected3 = \"0\";\n        String result3 = Solve1.solve(n3);\n        assertEquals(expected3, result3);\n    }\n}", "has_syntactic_error": false, "runtime_error": "\nFailures (1):\n  JUnit Vintage:Solve1_82_1Test:testSolve\n    MethodSource [className = 'original.Solve1_82_1Test', methodName = 'testSolve', methodParameterTypes = '']\n    => org.junit.ComparisonFailure: expected:<1[0]1> but was:<1[11]1>\n       org.junit.Assert.assertEquals(Assert.java:117)\n       org.junit.Assert.assertEquals(Assert.java:146)\n       original.Solve1_82_1Test.testSolve(Solve1_82_1Test.java:13)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n       org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\n       [...]\n\nTest run finished after 46 ms\n[         4 containers found      ]\n[         0 containers skipped    ]\n[         4 containers started    ]\n[         0 containers aborted    ]\n[         4 containers successful ]\n[         0 containers failed     ]\n[         1 tests found           ]\n[         0 tests skipped         ]\n[         1 tests started         ]\n[         0 tests aborted         ]\n[         0 tests successful      ]\n[         1 tests failed          ]\n\n"}