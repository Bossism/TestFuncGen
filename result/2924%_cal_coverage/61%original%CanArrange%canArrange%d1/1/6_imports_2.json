{"has_code": true, "source_code": "package original;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CanArrangeTest {\n\n    @Test\n    public void testCanArrange() {\n        List<Object> arr = new ArrayList<>();\n        arr.add(1);\n        arr.add(2);\n        arr.add(3);\n        arr.add(4);\n        arr.add(5);\n\n        int result = CanArrange.canArrange(arr);\n\n        assertEquals(-1, result);\n    }\n\n    @Test\n    public void testCanArrangeWithDescendingOrder() {\n        List<Object> arr = new ArrayList<>();\n        arr.add(5);\n        arr.add(4);\n        arr.add(3);\n        arr.add(2);\n        arr.add(1);\n\n        int result = CanArrange.canArrange(arr);\n\n        assertEquals(4, result);\n    }\n\n    @Test\n    public void testCanArrangeWithMixedOrder() {\n        List<Object> arr = new ArrayList<>();\n        arr.add(1);\n        arr.add(2);\n        arr.add(3);\n        arr.add(4);\n        arr.add(5);\n\n        int result = CanArrange.canArrange(arr);\n\n        assertEquals(-1, result);\n    }\n\n    @Test\n    public void testCanArrangeWithEmptyList() {\n        List<Object> arr = new ArrayList<>();\n\n        int result = CanArrange.canArrange(arr);\n\n        assertEquals(-1, result);\n    }\n\n    @Test\n    public void testCanArrangeWithNonIntegerElements() {\n        List<Object> arr = new ArrayList<>();\n        arr.add(1);\n        arr.add(\"2\");\n        arr.add(3);\n        arr.add(4);\n        arr.add(5);\n\n        int result = CanArrange.canArrange(arr);\n\n        assertEquals(-1, result);\n    }\n}", "has_syntactic_error": false, "runtime_error": "\nFailures (1):\n  JUnit Vintage:CanArrange_61_1Test:testCanArrangeWithNonIntegerElements\n    MethodSource [className = 'original.CanArrange_61_1Test', methodName = 'testCanArrangeWithNonIntegerElements', methodParameterTypes = '']\n    => java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Integer (java.lang.String and java.lang.Integer are in module java.base of loader 'bootstrap')\n       original.CanArrange.canArrange(id_135.java:33)\n       original.CanArrange_61_1Test.testCanArrangeWithNonIntegerElements(CanArrange_61_1Test.java:70)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n       org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\n       org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n       [...]\n\nTest run finished after 50 ms\n[         4 containers found      ]\n[         0 containers skipped    ]\n[         4 containers started    ]\n[         0 containers aborted    ]\n[         4 containers successful ]\n[         0 containers failed     ]\n[         5 tests found           ]\n[         0 tests skipped         ]\n[         5 tests started         ]\n[         0 tests aborted         ]\n[         4 tests successful      ]\n[         1 tests failed          ]\n\n"}