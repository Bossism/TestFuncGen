{"has_code": true, "source_code": "package original;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class ProdSignsTest {\n\n    @Test\n    public void testProdSigns_emptyList() {\n        List<Object> arr = new ArrayList<>();\n        Integer result = ProdSigns.prodSigns(arr);\n        assertNull(result);\n    }\n\n    @Test\n    public void testProdSigns_positiveNumbers() {\n        List<Object> arr = Arrays.asList(2, 4, 6);\n        Integer result = ProdSigns.prodSigns(arr);\n        assertEquals(Integer.valueOf(48), result);\n    }\n\n    @Test\n    public void testProdSigns_negativeNumbers() {\n        List<Object> arr = Arrays.asList(-2, -4, -6);\n        Integer result = ProdSigns.prodSigns(arr);\n        assertEquals(Integer.valueOf(-48), result);\n    }\n\n    @Test\n    public void testProdSigns_mixedNumbers() {\n        List<Object> arr = Arrays.asList(-2, 4, -6);\n        Integer result = ProdSigns.prodSigns(arr);\n        assertEquals(Integer.valueOf(48), result);\n    }\n\n    @Test\n    public void testProdSigns_zeroNumbers() {\n        List<Object> arr = Arrays.asList(0, 0, 0);\n        Integer result = ProdSigns.prodSigns(arr);\n        assertEquals(Integer.valueOf(0), result);\n    }\n\n    @Test\n    public void testProdSigns_nonIntegerValues() {\n        List<Object> arr = Arrays.asList(2, \"4\", 6);\n        Integer result = ProdSigns.prodSigns(arr);\n        assertEquals(Integer.valueOf(12), result);\n    }\n}", "has_syntactic_error": false, "runtime_error": "\nFailures (4):\n  JUnit Vintage:ProdSigns_40_1Test:testProdSigns_nonIntegerValues\n    MethodSource [className = 'original.ProdSigns_40_1Test', methodName = 'testProdSigns_nonIntegerValues', methodParameterTypes = '']\n    => java.lang.AssertionError: expected:<12> but was:<8>\n       org.junit.Assert.fail(Assert.java:89)\n       org.junit.Assert.failNotEquals(Assert.java:835)\n       org.junit.Assert.assertEquals(Assert.java:120)\n       org.junit.Assert.assertEquals(Assert.java:146)\n       original.ProdSigns_40_1Test.testProdSigns_nonIntegerValues(ProdSigns_40_1Test.java:51)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       [...]\n  JUnit Vintage:ProdSigns_40_1Test:testProdSigns_mixedNumbers\n    MethodSource [className = 'original.ProdSigns_40_1Test', methodName = 'testProdSigns_mixedNumbers', methodParameterTypes = '']\n    => java.lang.AssertionError: expected:<48> but was:<12>\n       org.junit.Assert.fail(Assert.java:89)\n       org.junit.Assert.failNotEquals(Assert.java:835)\n       org.junit.Assert.assertEquals(Assert.java:120)\n       org.junit.Assert.assertEquals(Assert.java:146)\n       original.ProdSigns_40_1Test.testProdSigns_mixedNumbers(ProdSigns_40_1Test.java:37)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       [...]\n  JUnit Vintage:ProdSigns_40_1Test:testProdSigns_positiveNumbers\n    MethodSource [className = 'original.ProdSigns_40_1Test', methodName = 'testProdSigns_positiveNumbers', methodParameterTypes = '']\n    => java.lang.AssertionError: expected:<48> but was:<12>\n       org.junit.Assert.fail(Assert.java:89)\n       org.junit.Assert.failNotEquals(Assert.java:835)\n       org.junit.Assert.assertEquals(Assert.java:120)\n       org.junit.Assert.assertEquals(Assert.java:146)\n       original.ProdSigns_40_1Test.testProdSigns_positiveNumbers(ProdSigns_40_1Test.java:23)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       [...]\n  JUnit Vintage:ProdSigns_40_1Test:testProdSigns_negativeNumbers\n    MethodSource [className = 'original.ProdSigns_40_1Test', methodName = 'testProdSigns_negativeNumbers', methodParameterTypes = '']\n    => java.lang.AssertionError: expected:<-48> but was:<-12>\n       org.junit.Assert.fail(Assert.java:89)\n       org.junit.Assert.failNotEquals(Assert.java:835)\n       org.junit.Assert.assertEquals(Assert.java:120)\n       org.junit.Assert.assertEquals(Assert.java:146)\n       original.ProdSigns_40_1Test.testProdSigns_negativeNumbers(ProdSigns_40_1Test.java:30)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       [...]\n\nTest run finished after 47 ms\n[         4 containers found      ]\n[         0 containers skipped    ]\n[         4 containers started    ]\n[         0 containers aborted    ]\n[         4 containers successful ]\n[         0 containers failed     ]\n[         6 tests found           ]\n[         0 tests skipped         ]\n[         6 tests started         ]\n[         0 tests aborted         ]\n[         2 tests successful      ]\n[         4 tests failed          ]\n\n"}