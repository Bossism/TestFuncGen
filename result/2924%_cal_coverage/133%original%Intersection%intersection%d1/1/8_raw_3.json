{"has_code": true, "source_code": "package original;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class IntersectionTest {\n\n    @Test\n    public void testIntersectionWithValidIntervals() {\n        List<Integer> interval1 = Arrays.asList(2, 7);\n        List<Integer> interval2 = Arrays.asList(5, 10);\n        assertEquals(\"YES\", Intersection.intersection(interval1, interval2));\n    }\n\n    @Test\n    public void testIntersectionWithInvalidIntervals() {\n        List<Integer> interval1 = Arrays.asList(2, 7);\n        List<Integer> interval2 = Arrays.asList(8, 10);\n        assertEquals(\"NO\", Intersection.intersection(interval1, interval2));\n    }\n\n    @Test\n    public void testIntersectionWithSameIntervals() {\n        List<Integer> interval1 = Arrays.asList(2, 7);\n        List<Integer> interval2 = Arrays.asList(2, 7);\n        assertEquals(\"YES\", Intersection.intersection(interval1, interval2));\n    }\n\n    @Test\n    public void testIntersectionWithNegativeIntervals() {\n        List<Integer> interval1 = Arrays.asList(-5, -2);\n        List<Integer> interval2 = Arrays.asList(-3, 0);\n        assertEquals(\"YES\", Intersection.intersection(interval1, interval2));\n    }\n\n    @Test\n    public void testIntersectionWithNoIntersection() {\n        List<Integer> interval1 = Arrays.asList(2, 7);\n        List<Integer> interval2 = Arrays.asList(8, 10);\n        assertEquals(\"NO\", Intersection.intersection(interval1, interval2));\n    }\n\n    @Test\n    public void testIntersectionWithPrimeDifference() {\n        List<Integer> interval1 = Arrays.asList(2, 7);\n        List<Integer> interval2 = Arrays.asList(4, 11);\n        assertEquals(\"YES\", Intersection.intersection(interval1, interval2));\n    }\n\n    @Test\n    public void testIntersectionWithNonPrimeDifference() {\n        List<Integer> interval1 = Arrays.asList(2, 7);\n        List<Integer> interval2 = Arrays.asList(4, 10);\n        assertEquals(\"NO\", Intersection.intersection(interval1, interval2));\n    }\n}", "has_syntactic_error": false, "runtime_error": "\nFailures (2):\n  JUnit Vintage:Intersection_133_1Test:testIntersectionWithNonPrimeDifference\n    MethodSource [className = 'original.Intersection_133_1Test', methodName = 'testIntersectionWithNonPrimeDifference', methodParameterTypes = '']\n    => org.junit.ComparisonFailure: expected:<[NO]> but was:<[YES]>\n       org.junit.Assert.assertEquals(Assert.java:117)\n       org.junit.Assert.assertEquals(Assert.java:146)\n       original.Intersection_133_1Test.testIntersectionWithNonPrimeDifference(Intersection_133_1Test.java:57)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n       org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\n       [...]\n  JUnit Vintage:Intersection_133_1Test:testIntersectionWithNegativeIntervals\n    MethodSource [className = 'original.Intersection_133_1Test', methodName = 'testIntersectionWithNegativeIntervals', methodParameterTypes = '']\n    => org.junit.ComparisonFailure: expected:<[YES]> but was:<[NO]>\n       org.junit.Assert.assertEquals(Assert.java:117)\n       org.junit.Assert.assertEquals(Assert.java:146)\n       original.Intersection_133_1Test.testIntersectionWithNegativeIntervals(Intersection_133_1Test.java:36)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n       org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\n       [...]\n\nTest run finished after 47 ms\n[         4 containers found      ]\n[         0 containers skipped    ]\n[         4 containers started    ]\n[         0 containers aborted    ]\n[         4 containers successful ]\n[         0 containers failed     ]\n[         7 tests found           ]\n[         0 tests skipped         ]\n[         7 tests started         ]\n[         0 tests aborted         ]\n[         5 tests successful      ]\n[         2 tests failed          ]\n\n"}