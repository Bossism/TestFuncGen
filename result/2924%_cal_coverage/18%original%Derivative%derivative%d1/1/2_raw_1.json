{"has_code": true, "source_code": "package original;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class DerivativeTest {\n\n    @Test\n    public void testDerivative() {\n        List<Integer> xs = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        List<Object> expected = new ArrayList<>(Arrays.asList(2, 6, 12, 20));\n        List<Object> result = Derivative.derivative(xs);\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testDerivativeWithEmptyList() {\n        List<Integer> xs = new ArrayList<>();\n        List<Object> expected = new ArrayList<>();\n        List<Object> result = Derivative.derivative(xs);\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testDerivativeWithSingleElementList() {\n        List<Integer> xs = new ArrayList<>(Arrays.asList(1));\n        List<Object> expected = new ArrayList<>();\n        List<Object> result = Derivative.derivative(xs);\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testDerivativeWithNegativeNumbers() {\n        List<Integer> xs = new ArrayList<>(Arrays.asList(-1, -2, -3, -4, -5));\n        List<Object> expected = new ArrayList<>(Arrays.asList(-2, -6, -12, -20));\n        List<Object> result = Derivative.derivative(xs);\n        assertEquals(expected, result);\n    }\n}", "has_syntactic_error": false, "coverage_xml": true}