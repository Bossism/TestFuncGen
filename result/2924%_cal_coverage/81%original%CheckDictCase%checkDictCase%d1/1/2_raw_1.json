{"has_code": true, "source_code": "package original;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class CheckDictCaseTest {\n\n    @Test\n    public void testCheckDictCase() {\n        // Test case 1: Empty map\n        Map<String, Integer> emptyMap = new HashMap<>();\n        assertFalse(CheckDictCase.checkDictCase(emptyMap));\n\n        // Test case 2: Map with all lowercase keys\n        Map<String, Integer> lowercaseMap = new HashMap<>();\n        lowercaseMap.put(\"key1\", 1);\n        lowercaseMap.put(\"key2\", 2);\n        assertTrue(CheckDictCase.checkDictCase(lowercaseMap));\n\n        // Test case 3: Map with all uppercase keys\n        Map<String, Integer> uppercaseMap = new HashMap<>();\n        uppercaseMap.put(\"KEY1\", 1);\n        uppercaseMap.put(\"KEY2\", 2);\n        assertTrue(CheckDictCase.checkDictCase(uppercaseMap));\n\n        // Test case 4: Map with mixed case keys\n        Map<String, Integer> mixedCaseMap = new HashMap<>();\n        mixedCaseMap.put(\"Key1\", 1);\n        mixedCaseMap.put(\"KEY2\", 2);\n        assertFalse(CheckDictCase.checkDictCase(mixedCaseMap));\n\n        // Test case 5: Map with non-string keys\n        Map<Integer, Integer> nonStringKeyMap = new HashMap<>();\n        nonStringKeyMap.put(1, 1);\n        nonStringKeyMap.put(2, 2);\n        assertFalse(CheckDictCase.checkDictCase(nonStringKeyMap));\n\n        // Test case 6: Non-map object\n        Object nonMapObject = new Object();\n        assertFalse(CheckDictCase.checkDictCase(nonMapObject));\n    }\n}", "has_syntactic_error": false, "coverage_xml": true}