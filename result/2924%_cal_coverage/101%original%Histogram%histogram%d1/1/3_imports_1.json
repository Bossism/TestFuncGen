{"has_code": true, "source_code": "package original;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class HistogramTest {\n\n    @Test\n    public void testHistogram() {\n        // Test case 1: Empty string\n        String test1 = \"\";\n        Map<String, Integer> expected1 = new HashMap<>();\n        assertEquals(expected1, Histogram.histogram(test1));\n\n        // Test case 2: String with one word\n        String test2 = \"hello\";\n        Map<String, Integer> expected2 = new HashMap<>();\n        expected2.put(\"hello\", 1);\n        assertEquals(expected2, Histogram.histogram(test2));\n\n        // Test case 3: String with multiple words\n        String test3 = \"hello world hello\";\n        Map<String, Integer> expected3 = new HashMap<>();\n        expected3.put(\"hello\", 2);\n        expected3.put(\"world\", 1);\n        assertEquals(expected3, Histogram.histogram(test3));\n\n        // Test case 4: String with multiple words and multiple words with same frequency\n        String test4 = \"hello world hello world\";\n        Map<String, Integer> expected4 = new HashMap<>();\n        expected4.put(\"hello\", 2);\n        expected4.put(\"world\", 2);\n        assertEquals(expected4, Histogram.histogram(test4));\n    }\n}", "has_syntactic_error": false, "runtime_error": "\nFailures (1):\n  JUnit Vintage:Histogram_101_1Test:testHistogram\n    MethodSource [className = 'original.Histogram_101_1Test', methodName = 'testHistogram', methodParameterTypes = '']\n    => java.lang.AssertionError: expected:<{world=1, hello=2}> but was:<{hello=2}>\n       org.junit.Assert.fail(Assert.java:89)\n       org.junit.Assert.failNotEquals(Assert.java:835)\n       org.junit.Assert.assertEquals(Assert.java:120)\n       org.junit.Assert.assertEquals(Assert.java:146)\n       original.Histogram_101_1Test.testHistogram(Histogram_101_1Test.java:27)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       [...]\n\nTest run finished after 37 ms\n[         4 containers found      ]\n[         0 containers skipped    ]\n[         4 containers started    ]\n[         0 containers aborted    ]\n[         4 containers successful ]\n[         0 containers failed     ]\n[         1 tests found           ]\n[         0 tests skipped         ]\n[         1 tests started         ]\n[         0 tests aborted         ]\n[         0 tests successful      ]\n[         1 tests failed          ]\n\n"}