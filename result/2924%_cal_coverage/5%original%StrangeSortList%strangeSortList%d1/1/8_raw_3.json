{"has_code": true, "source_code": "package original;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class StrangeSortListTest {\n\n    @Test\n    public void testStrangeSortList() {\n        List<Object> input = new ArrayList<>(Arrays.asList(5, \"hello\", 3, \"world\", 1));\n        List<Object> expectedOutput = new ArrayList<>(Arrays.asList(1, 3, 5));\n        \n        List<Object> result = StrangeSortList.strangeSortList(input);\n        \n        assertEquals(expectedOutput, result);\n    }\n    \n    @Test\n    public void testStrangeSortListWithEmptyList() {\n        List<Object> input = new ArrayList<>();\n        List<Object> expectedOutput = new ArrayList<>();\n        \n        List<Object> result = StrangeSortList.strangeSortList(input);\n        \n        assertEquals(expectedOutput, result);\n    }\n    \n    @Test\n    public void testStrangeSortListWithNoIntegers() {\n        List<Object> input = new ArrayList<>(Arrays.asList(\"hello\", \"world\"));\n        List<Object> expectedOutput = new ArrayList<>();\n        \n        List<Object> result = StrangeSortList.strangeSortList(input);\n        \n        assertEquals(expectedOutput, result);\n    }\n    \n    @Test\n    public void testStrangeSortListWithAllIntegers() {\n        List<Object> input = new ArrayList<>(Arrays.asList(5, 3, 1));\n        List<Object> expectedOutput = new ArrayList<>(Arrays.asList(1, 3, 5));\n        \n        List<Object> result = StrangeSortList.strangeSortList(input);\n        \n        assertEquals(expectedOutput, result);\n    }\n}", "has_syntactic_error": false, "runtime_error": "\nFailures (2):\n  JUnit Vintage:StrangeSortList_5_1Test:testStrangeSortList\n    MethodSource [className = 'original.StrangeSortList_5_1Test', methodName = 'testStrangeSortList', methodParameterTypes = '']\n    => java.lang.AssertionError: expected:<[1, 3, 5]> but was:<[1, 5, 3]>\n       org.junit.Assert.fail(Assert.java:89)\n       org.junit.Assert.failNotEquals(Assert.java:835)\n       org.junit.Assert.assertEquals(Assert.java:120)\n       org.junit.Assert.assertEquals(Assert.java:146)\n       original.StrangeSortList_5_1Test.testStrangeSortList(StrangeSortList_5_1Test.java:18)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       [...]\n  JUnit Vintage:StrangeSortList_5_1Test:testStrangeSortListWithAllIntegers\n    MethodSource [className = 'original.StrangeSortList_5_1Test', methodName = 'testStrangeSortListWithAllIntegers', methodParameterTypes = '']\n    => java.lang.AssertionError: expected:<[1, 3, 5]> but was:<[1, 5, 3]>\n       org.junit.Assert.fail(Assert.java:89)\n       org.junit.Assert.failNotEquals(Assert.java:835)\n       org.junit.Assert.assertEquals(Assert.java:120)\n       org.junit.Assert.assertEquals(Assert.java:146)\n       original.StrangeSortList_5_1Test.testStrangeSortListWithAllIntegers(StrangeSortList_5_1Test.java:48)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       [...]\n\nTest run finished after 46 ms\n[         4 containers found      ]\n[         0 containers skipped    ]\n[         4 containers started    ]\n[         0 containers aborted    ]\n[         4 containers successful ]\n[         0 containers failed     ]\n[         4 tests found           ]\n[         0 tests skipped         ]\n[         4 tests started         ]\n[         0 tests aborted         ]\n[         2 tests successful      ]\n[         2 tests failed          ]\n\n"}