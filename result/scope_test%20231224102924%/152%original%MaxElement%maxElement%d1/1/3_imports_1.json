{"has_code": true, "source_code": "package original;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class MaxElementTest {\n\n    @Test\n    public void testMaxElement() {\n        List<Integer> list1 = Arrays.asList(1, 2, 3, 4, 5);\n        assertEquals(5, MaxElement.maxElement(list1));\n\n        List<Integer> list2 = Arrays.asList(10, 20, 30, 40, 50);\n        assertEquals(50, MaxElement.maxElement(list2));\n\n        List<Integer> list3 = Arrays.asList(-1, -2, -3, -4, -5);\n        assertEquals(-1, MaxElement.maxElement(list3));\n\n        List<Integer> list4 = Arrays.asList(5);\n        assertEquals(5, MaxElement.maxElement(list4));\n\n        List<Integer> list5 = Arrays.asList();\n        try {\n            MaxElement.maxElement(list5);\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"List cannot be empty\", e.getMessage());\n        }\n    }\n}", "has_syntactic_error": false, "runtime_error": "\nFailures (1):\n  JUnit Vintage:MaxElement_152_1Test:testMaxElement\n    MethodSource [className = 'original.MaxElement_152_1Test', methodName = 'testMaxElement', methodParameterTypes = '']\n    => java.lang.AssertionError: Expected IllegalArgumentException\n       org.junit.Assert.fail(Assert.java:89)\n       original.MaxElement_152_1Test.testMaxElement(MaxElement_152_1Test.java:26)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n       org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\n       org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n       [...]\n\nTest run finished after 40 ms\n[         4 containers found      ]\n[         0 containers skipped    ]\n[         4 containers started    ]\n[         0 containers aborted    ]\n[         4 containers successful ]\n[         0 containers failed     ]\n[         1 tests found           ]\n[         0 tests skipped         ]\n[         1 tests started         ]\n[         0 tests aborted         ]\n[         0 tests successful      ]\n[         1 tests failed          ]\n\n"}