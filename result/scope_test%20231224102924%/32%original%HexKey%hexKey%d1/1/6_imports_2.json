{"has_code": true, "source_code": "package original;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class HexKeyTest {\n\n    @Test\n    public void testHexKey() {\n        // Test case 1: hex contains no special characters\n        Object num1 = 1234567890;\n        int expected1 = 0;\n        int result1 = HexKey.hexKey(num1);\n        assertEquals(expected1, result1);\n\n        // Test case 2: hex contains only special characters\n        Object num2 = \"BDBDBDBD\";\n        int expected2 = 8;\n        int result2 = HexKey.hexKey(num2);\n        assertEquals(expected2, result2);\n\n        // Test case 3: hex contains a mix of special and non-special characters\n        Object num3 = \"123B567D9\";\n        int expected3 = 6; // Fix: Expected result should be 6 instead of 4\n        int result3 = HexKey.hexKey(num3);\n        assertEquals(expected3, result3);\n    }\n}", "has_syntactic_error": false, "runtime_error": "\nFailures (1):\n  JUnit Vintage:HexKey_32_1Test:testHexKey\n    MethodSource [className = 'original.HexKey_32_1Test', methodName = 'testHexKey', methodParameterTypes = '']\n    => java.lang.AssertionError: expected:<0> but was:<4>\n       org.junit.Assert.fail(Assert.java:89)\n       org.junit.Assert.failNotEquals(Assert.java:835)\n       org.junit.Assert.assertEquals(Assert.java:647)\n       org.junit.Assert.assertEquals(Assert.java:633)\n       original.HexKey_32_1Test.testHexKey(HexKey_32_1Test.java:14)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       [...]\n\nTest run finished after 39 ms\n[         4 containers found      ]\n[         0 containers skipped    ]\n[         4 containers started    ]\n[         0 containers aborted    ]\n[         4 containers successful ]\n[         0 containers failed     ]\n[         1 tests found           ]\n[         0 tests skipped         ]\n[         1 tests started         ]\n[         0 tests aborted         ]\n[         0 tests successful      ]\n[         1 tests failed          ]\n\n"}