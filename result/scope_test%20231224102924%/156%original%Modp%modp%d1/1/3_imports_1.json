{"has_code": true, "source_code": "package original;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class ModpTest {\n\n    @Test\n    public void testModp() {\n        // Test case 1\n        int result1 = Modp.modp(5, 7);\n        assertEquals(4, result1);\n\n        // Test case 2\n        int result2 = Modp.modp(10, 13);\n        assertEquals(9, result2);\n\n        // Test case 3\n        int result3 = Modp.modp(0, 5);\n        assertEquals(1, result3);\n    }\n}", "has_syntactic_error": false, "runtime_error": "\nFailures (1):\n  JUnit Vintage:Modp_156_1Test:testModp\n    MethodSource [className = 'original.Modp_156_1Test', methodName = 'testModp', methodParameterTypes = '']\n    => java.lang.AssertionError: expected:<9> but was:<10>\n       org.junit.Assert.fail(Assert.java:89)\n       org.junit.Assert.failNotEquals(Assert.java:835)\n       org.junit.Assert.assertEquals(Assert.java:647)\n       org.junit.Assert.assertEquals(Assert.java:633)\n       original.Modp_156_1Test.testModp(Modp_156_1Test.java:15)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       [...]\n\nTest run finished after 41 ms\n[         4 containers found      ]\n[         0 containers skipped    ]\n[         4 containers started    ]\n[         0 containers aborted    ]\n[         4 containers successful ]\n[         0 containers failed     ]\n[         1 tests found           ]\n[         0 tests skipped         ]\n[         1 tests started         ]\n[         0 tests aborted         ]\n[         0 tests successful      ]\n[         1 tests failed          ]\n\n"}