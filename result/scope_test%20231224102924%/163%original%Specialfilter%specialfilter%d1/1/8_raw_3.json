{"has_code": true, "source_code": "package original;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class SpecialfilterTest {\n\n    @Test\n    public void testSpecialfilter() {\n        List<Object> nums = Arrays.asList(12, 15, 18, 21, 24, 27, 30);\n        int result = Specialfilter.specialfilter(nums);\n        assertEquals(3, result);\n    }\n\n    @Test\n    public void testSpecialfilterWithEmptyList() {\n        List<Object> nums = Arrays.asList();\n        int result = Specialfilter.specialfilter(nums);\n        assertEquals(0, result);\n    }\n\n    @Test\n    public void testSpecialfilterWithNoNumbersGreaterThan10() {\n        List<Object> nums = Arrays.asList(1, 2, 3, 4, 5);\n        int result = Specialfilter.specialfilter(nums);\n        assertEquals(0, result);\n    }\n\n    @Test\n    public void testSpecialfilterWithNumbersGreaterThan10ButNotSpecial() {\n        List<Object> nums = Arrays.asList(12, 15, 18, 21, 24, 27, 30, 32);\n        int result = Specialfilter.specialfilter(nums);\n        assertEquals(0, result);\n    }\n\n    @Test\n    public void testSpecialfilterWithNumbersGreaterThan10AndSpecial() {\n        List<Object> nums = Arrays.asList(12, 15, 18, 21, 24, 27, 30, 31);\n        int result = Specialfilter.specialfilter(nums);\n        assertEquals(1, result);\n    }\n}", "has_syntactic_error": false, "runtime_error": "\nFailures (3):\n  JUnit Vintage:Specialfilter_163_1Test:testSpecialfilterWithNumbersGreaterThan10AndSpecial\n    MethodSource [className = 'original.Specialfilter_163_1Test', methodName = 'testSpecialfilterWithNumbersGreaterThan10AndSpecial', methodParameterTypes = '']\n    => java.lang.AssertionError: expected:<1> but was:<2>\n       org.junit.Assert.fail(Assert.java:89)\n       org.junit.Assert.failNotEquals(Assert.java:835)\n       org.junit.Assert.assertEquals(Assert.java:647)\n       org.junit.Assert.assertEquals(Assert.java:633)\n       original.Specialfilter_163_1Test.testSpecialfilterWithNumbersGreaterThan10AndSpecial(Specialfilter_163_1Test.java:42)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       [...]\n  JUnit Vintage:Specialfilter_163_1Test:testSpecialfilterWithNumbersGreaterThan10ButNotSpecial\n    MethodSource [className = 'original.Specialfilter_163_1Test', methodName = 'testSpecialfilterWithNumbersGreaterThan10ButNotSpecial', methodParameterTypes = '']\n    => java.lang.AssertionError: expected:<0> but was:<1>\n       org.junit.Assert.fail(Assert.java:89)\n       org.junit.Assert.failNotEquals(Assert.java:835)\n       org.junit.Assert.assertEquals(Assert.java:647)\n       org.junit.Assert.assertEquals(Assert.java:633)\n       original.Specialfilter_163_1Test.testSpecialfilterWithNumbersGreaterThan10ButNotSpecial(Specialfilter_163_1Test.java:35)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       [...]\n  JUnit Vintage:Specialfilter_163_1Test:testSpecialfilter\n    MethodSource [className = 'original.Specialfilter_163_1Test', methodName = 'testSpecialfilter', methodParameterTypes = '']\n    => java.lang.AssertionError: expected:<3> but was:<1>\n       org.junit.Assert.fail(Assert.java:89)\n       org.junit.Assert.failNotEquals(Assert.java:835)\n       org.junit.Assert.assertEquals(Assert.java:647)\n       org.junit.Assert.assertEquals(Assert.java:633)\n       original.Specialfilter_163_1Test.testSpecialfilter(Specialfilter_163_1Test.java:14)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n       java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       java.base/java.lang.reflect.Method.invoke(Method.java:566)\n       org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n       [...]\n\nTest run finished after 46 ms\n[         4 containers found      ]\n[         0 containers skipped    ]\n[         4 containers started    ]\n[         0 containers aborted    ]\n[         4 containers successful ]\n[         0 containers failed     ]\n[         5 tests found           ]\n[         0 tests skipped         ]\n[         5 tests started         ]\n[         0 tests aborted         ]\n[         2 tests successful      ]\n[         3 tests failed          ]\n\n"}